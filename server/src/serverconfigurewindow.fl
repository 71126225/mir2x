# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.hpp}
code_name {.cpp}
decl {\#include <cmath>} {public global
}

decl {\#include <algorithm>} {public global
}

class ServerConfigureWindow {open
} {
  Function {ServerConfigureWindow()} {open
  } {
    Fl_Window m_window {
      label ConfigureWindow open selected
      xywh {630 211 625 360} type Double labelfont 4 modal visible
    } {
      Fl_Value_Input m_maxPlayerCount {
        label {Maximal Player: }
        xywh {172 146 60 24} labelfont 4 minimum 1024 maximum 10000 value 5000 textfont 4
      }
      Fl_Input m_mapFullName {
        label {Map Path: }
        xywh {172 20 273 24} labelfont 4 textfont 4
      }
      Fl_Input m_scriptFullName {
        label {Script Path: }
        xywh {172 61 273 24} labelfont 4 textfont 4
      }
      Fl_Value_Input m_equipRate {
        label {Equipment Rate: }
        xywh {172 221 60 24} labelfont 4 minimum 1024 maximum 10000 value 1.5 textfont 4
      }
      Fl_Value_Input m_expRate {
        label {Exprience Rate: }
        xywh {172 183 60 24} labelfont 4 minimum 1024 maximum 10000 value 1.5 textfont 4
      }
      Fl_Value_Input m_goldRate {
        label {Gold Rate: }
        xywh {172 259 60 24} labelfont 4 minimum 1024 maximum 10000 value 1.5 textfont 4
      }
      Fl_Button {} {
        label {@fileopen}
        callback {{
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Load Map Database File...");
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    char szMatchedFileNames[] =
        "MAPDBN\\t*.ZIP\\n"
        ;

    stFileChooser.filter(szMatchedFileNames);
    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szPath = stFileChooser.filename();
                std::replace(szPath.begin(), szPath.end(), '\\\\', '/');

                m_mapFullName->value(szPath.c_str());
            }
    }
}}
        xywh {451 20 26 23}
        code0 {\#include <string>}
        code1 {\#include <FL/Fl_Native_File_Chooser.H>}
        code2 {\#include <FL/fl_ask.H>}
      }
      Fl_Value_Input m_maxMonsterCount {
        label {Maximal Monster: }
        xywh {172 108 60 24} labelfont 4 minimum 1024 maximum 10000 value 5000 textfont 4
      }
      Fl_Button {} {
        label OK
        callback {{
	m_window->hide();
}}
        xywh {450 315 70 25}
      }
      Fl_Value_Input m_port {
        label {Listen Port: }
        xywh {171 298 60 24} labelfont 4 minimum 1024 maximum 10000 value 5000 textfont 4
      }
      Fl_Button {} {
        label {@fileopen}
        callback {{
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Load Map Script Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szPath = stFileChooser.filename();
                std::replace(szPath.begin(), szPath.end(), '\\\\', '/');

                m_scriptFullName->value(szPath.c_str());
            }
    }
}}
        xywh {451 61 26 23}
        code0 {\#include <string>}
        code1 {\#include <FL/Fl_Native_File_Chooser.H>}
        code2 {\#include <FL/fl_ask.H>}
      }
    }
    code {// set up the default map path
{
    m_mapFullName->value("Map/MapBinDB.ZSDB");
    m_scriptFullName->value("script/map");
}} {}
  }
  Function {showAll()} {} {
    code {{
    m_window->show();
}} {}
  }
  Function {GetMapPath()} {return_type {std::string}
  } {
    code {{
	// printf("%d\\n", std::lround(m_VIPort1->value()));
	return m_mapFullName->value() ? m_mapFullName->value() : "";
}} {}
  }
  Function {getScriptPath()} {return_type {std::string}
  } {
    code {{
	return "";
}} {}
  }
  Function {MaxPlayerCount()} {return_type int
  } {
    code {{
    return std::lround(m_maxPlayerCount->value());
}} {}
  }
  Function {ExpRate()} {return_type double
  } {
    code {{
    return (std::max<double>)(0.00, (double)(m_expRate->value()));
}} {}
  }
  Function {EquipRate()} {return_type double
  } {
    code {{
    return (std::max<double>)(0.00, (double)(m_equipRate->value()));
}} {}
  }
  Function {GoldRate()} {return_type double
  } {
    code {{
    return (std::max<double>)(0.00, (double)(m_goldRate->value()));
}} {}
  }
  Function {MaxMonsterCount()} {return_type int
  } {
    code {{
    return std::lround(m_maxMonsterCount->value());
}} {}
  }
  Function {Port()} {return_type int
  } {
    code {{
    return std::lround(m_port->value());
}} {}
  }
}
