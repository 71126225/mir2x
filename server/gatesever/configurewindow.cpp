// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "configurewindow.hpp"

ConfigureWindow::ConfigureWindow() {
  { m_Window = new Fl_Double_Window(611, 313, "ConfigureWindow");
    m_Window->labelfont(4);
    m_Window->user_data((void*)(this));
    { m_VIPort1 = new Fl_Value_Input(147, 24, 60, 24, "Client Port: ");
      m_VIPort1->labelfont(4);
      m_VIPort1->minimum(1024);
      m_VIPort1->maximum(10000);
      m_VIPort1->value(3400);
      m_VIPort1->textfont(4);
    } // Fl_Value_Input* m_VIPort1
    { m_VIPort2 = new Fl_Value_Input(147, 60, 60, 24, "Server Port: ");
      m_VIPort2->labelfont(4);
      m_VIPort2->minimum(1024);
      m_VIPort2->maximum(10000);
      m_VIPort2->value(3500);
      m_VIPort2->textfont(4);
    } // Fl_Value_Input* m_VIPort2
    { m_DatabaseIP = new Fl_Input(147, 95, 150, 24, "Database IP: ");
      m_DatabaseIP->labelfont(4);
      m_DatabaseIP->textfont(4);
    } // Fl_Input* m_DatabaseIP
    { m_DatabasePort = new Fl_Value_Input(147, 131, 60, 24, "Database Port: ");
      m_DatabasePort->labelfont(4);
      m_DatabasePort->minimum(1024);
      m_DatabasePort->maximum(10000);
      m_DatabasePort->value(3306);
      m_DatabasePort->textfont(4);
    } // Fl_Value_Input* m_DatabasePort
    { m_UserName = new Fl_Input(147, 167, 150, 24, "User Name: ");
      m_UserName->labelfont(4);
      m_UserName->textfont(4);
    } // Fl_Input* m_UserName
    { m_Password = new Fl_Input(147, 203, 150, 24, "Password: ");
      m_Password->type(5);
      m_Password->labelfont(4);
      m_Password->textfont(4);
    } // Fl_Input* m_Password
    { m_DatabaseName = new Fl_Input(147, 239, 150, 24, "Database Name: ");
      m_DatabaseName->labelfont(4);
      m_DatabaseName->textfont(4);
    } // Fl_Input* m_DatabaseName
    m_Window->end();
  } // Fl_Double_Window* m_Window
  m_DatabaseIP->value("127.0.0.1");
  m_UserName->value("root");
  m_Password->value("hah86918");
  m_DatabaseName->value("mir2x");
}

void ConfigureWindow::ShowAll() {
  {
      m_Window->show();
  }
}

int ConfigureWindow::ClientPort() {
  {
      // printf("%d\n", std::lround(m_VIPort1->value()));
  
      return std::lround(m_VIPort1->value());
  }
}

int ConfigureWindow::SceneServerPort() {
  {
      return std::lround(m_VIPort2->value());
  }
}

int ConfigureWindow::DatabasePort() {
  {
      return std::lround(m_DatabasePort->value());
  }
}

const char * ConfigureWindow::DatabaseIP() {
  {
      return m_DatabaseIP->value();
  }
}

const char * ConfigureWindow::DatabaseName() {
  {
      return m_DatabaseName->value();
  }
}

const char * ConfigureWindow::UserName() {
  {
      return m_UserName->value();
  }
}

const char * ConfigureWindow::Password() {
  {
      return m_Password->value();
  }
}
