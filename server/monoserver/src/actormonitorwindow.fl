# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.hpp}
code_name {.cpp}
decl {\#include "actormonitortable.hpp"} {private global
}

class ActorMonitorWindow {} {
  Function {ActorMonitorWindow()} {} {
    Fl_Window m_window {
      label ActorMointorWindow
      xywh {2666 215 900 445} type Double labelfont 4 resizable visible
    } {
      Fl_Table m_actorMonitorTable {
        xywh {0 25 900 400} labelfont 4 resizable
        code0 {\#include "actormonitortable.hpp"}
        class ActorMonitorTable
      } {}
      Fl_Menu_Bar {} {
        xywh {0 0 900 25} box THIN_UP_BOX labelfont 4
      } {
        Submenu {} {
          label Monitor
          xywh {0 0 70 21} labelfont 4
        } {
          MenuItem {} {
            label {Exit    }
            callback {{
    m_window->hide();
}}
            xywh {0 0 36 21} shortcut 0x40071 labelfont 4
          }
        }
      }
      Fl_Box m_logBar {
        xywh {0 425 900 20} box UP_BOX labelfont 4 align 20
      }
    }
    code {// register the timer here
Fl::add_timeout(1.370, ActorMonitorWindow_Timer_CB, this);} {}
  }
  Function {ShowAll()} {return_type void
  } {
    code {m_window->show();} {}
  }
  Function {RedrawAll()} {return_type void
  } {
    code {m_window->redraw();} {}
  }
  Function {UpdateTable()} {return_type void
  } {
    code {dynamic_cast<ActorMonitorTable *>(m_actorMonitorTable)->UpdateTable();
char buf[64];
std::sprintf(buf, "actors: %d", m_actorMonitorTable->rows());
addLog(buf);} {}
  }
  Function {addLog(const char *log)} {return_type void
  } {
    code {if(log){
    m_logBar->copy_label(log);
}
else{
    m_logBar->copy_label("version: 0.0.1");
}

m_logBar->redraw();
m_window->redraw();} {}
  }
}

Function {ActorMonitorWindow_Timer_CB(void *pUserData)} {return_type void
} {
  code {// used to flush the actor mointor table
{
    auto pWindow = (ActorMonitorWindow *)(pUserData);
    if(pWindow->m_window->visible()){
        pWindow->UpdateTable();
        pWindow->RedrawAll();
    }
    Fl::repeat_timeout(1.370, ActorMonitorWindow_Timer_CB, pWindow);
}} {}
}
