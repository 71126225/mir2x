# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <asio.hpp>} {public global
} 

decl {\#include <ctime>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <mutex>} {private local
} 

decl {class CommandWindow;} {public global
} 

class MainWindow {open
} {
  Function {MainWindow()} {open
  } {
    Fl_Window m_Window {
      label {Scene Server}
      callback {{
	// do nothing
}} open
      xywh {746 272 720 400} type Double labelfont 4 resizable visible
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 721 25} box FLAT_BOX labelfont 4 textfont 4
      } {
        Submenu {} {
          label Server open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label {Launch          }
            callback {{
	extern MonoServer *g_MonoServer;
	delete g_MonoServer;
	
	g_MonoServer = new MonoServer();
	g_MonoServer->Launch();
}}
            xywh {0 0 30 20} shortcut 0x4006c labelfont 4 divider
            code0 {\#include "monoserver.hpp"}
          }
          MenuItem {} {
            label Pause
            xywh {10 10 30 20} shortcut 0x40070 labelfont 4 divider
          }
          MenuItem {} {
            label Quit
            callback {{
	exit(0);
}}
            xywh {20 20 30 20} labelfont 4
          }
        }
        Submenu {} {
          label Configure open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label {Server          }
            callback {{
	extern ServerConfigureWindow	*g_ServerConfigureWindow;
	g_ServerConfigureWindow->ShowAll();
}}
            xywh {10 10 30 20} labelfont 4
            code0 {\#include "serverconfigurewindow.hpp"}
          }
          MenuItem {} {
            label {Network            }
            callback {{
	extern DatabaseConfigureWindow	*g_DatabaseConfigureWindow;
	g_DatabaseConfigureWindow->ShowAll();
}}
            xywh {0 0 30 20} labelfont 4
            code0 {\#include "databaseconfigurewindow.hpp"}
          }
        }
        Submenu m_CommandMenuButton {
          label Command open
          xywh {15 15 62 20} labelfont 4
        } {
          MenuItem {} {
            label {Add Monster        }
            callback {{
	extern AddMonsterWindow	*g_AddMonsterWindow;
    	g_AddMonsterWindow->Refresh();
    	g_AddMonsterWindow->ShowAll();
}}
            xywh {15 15 30 20} labelfont 4 divider
            code0 {\#include "addmonsterwindow.hpp"}
          }
          MenuItem m_CWMenuItem {
            label {Run Command    }
            callback {{
	auto pCommandWindow = new CommandWindow();
	pCommandWindow->ShowAll();
}}
            xywh {25 25 30 20} labelfont 4 divider
            code0 {\#include "commandwindow.hpp"}
          }
          Submenu m_SubMenuRunCommand {
            label {Run Command}
            callback {// create a new command window if pressed
// to retrieve the created windows, use cwid to find it
{
    if(CreateCommandWindow() > 0){
    }else{
        fl_alert("%s", "Create command window failed");
    }
}} open
            xywh {0 0 70 20} labelfont 4
            code0 {\#include "monoserver.hpp"}
          } {
            MenuItem m_MenuItemToggleAll {
              label {Toggle All    }
              xywh {0 0 36 20} labelfont 4 divider
            }
            MenuItem m_MenuItemFirstCW {
              label {Window 1}
              xywh {20 20 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 2}
              xywh {30 30 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 3} selected
              xywh {40 40 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 4}
              xywh {50 50 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 5}
              xywh {60 60 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 6}
              xywh {70 70 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 7}
              xywh {80 80 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 8}
              xywh {90 90 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 9}
              xywh {100 100 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 10}
              xywh {110 110 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 11}
              xywh {120 120 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 12}
              xywh {120 120 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 13}
              xywh {130 130 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 14}
              xywh {140 140 36 20} labelfont 4 hide
            }
            MenuItem {} {
              label {Window 15}
              xywh {150 150 36 20} labelfont 4 hide
            }
            MenuItem m_MenuItemLastCW {
              label {Window 16}
              xywh {160 160 36 20} labelfont 4 hide
            }
          }
        }
        Submenu {} {
          label Script open
          xywh {0 0 100 20} labelfont 4
        } {
          MenuItem {} {
            label {Load      }
            callback {{
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Load Server Lua Script...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szFileName = stFileChooser.filename();
                std::replace(szFileName.begin(), szFileName.end(), '\\\\', '/');

                extern ScriptWindow *g_ScriptWindow;
                g_ScriptWindow->LoadFile(szFileName.c_str());
            }
    }

}}
            xywh {0 0 100 20} labelfont 4
            code0 {\#include "scriptwindow.hpp"}
          }
        }
      }
      Fl_Browser m_Browser {
        xywh {0 24 720 375} type Hold labelfont 4 textfont 4 resizable
      }
    }
  }
  Function {ShowAll()} {} {
    code {{
    m_Window->show();
}} {}
  }
  Function {AddLog(int nLogType, const char *szMessage)} {return_type void
  } {
    code {// AddLog(int nLogType, const char *szMessage)
{
    // this function only interact with FLTK
    // for multi-thread lock and unlock, don't put it here
    // 
    // refer to http://www.fltk.org/doc-1.3/group_fl_multithread.html
    // FLTK requests to do rendering in main thread, so
    //    1. use Fl::lock() and Fl::unlock() to access FLTK widgets in child threads
    //    2. use Fl::awake(function_indicator) to post callbacks to main thread
    // I use a wrapper function NotifyGUI("Command") for method 2
    // here keeps code MainWindow::AddLog() independent from these two methods
	std::time_t stRes = std::time(nullptr);
	std::string szFullMessage = std::asctime(std::localtime(&stRes));
	szFullMessage.back() = ' ';
	switch(nLogType){
		case 0:
			szFullMessage = "@C4" + szFullMessage + "  " + szMessage;
			break;
		case 1:
			szFullMessage = "@C9" + szFullMessage + "  " + szMessage;
			break;
		default:
			szFullMessage = "@C1" + szFullMessage + "  " + szMessage;
			break;
		}

    if(m_Browser->size() > 5000){
        m_Browser->remove(1);
    }

	m_Browser->add(szFullMessage.c_str());
	m_Browser->bottomline(m_Browser->size());
}} {}
  }
  Function {AddCWLog(int nCWID, int nLogType, const char *szPrompt, const char *szMessage)} {return_type void
  } {
    code {// AddCWLog(int nCWID, int nLogType, const char *szPrompt, const char *szMessage)
{
    // this function only interact with FLTK
    // for multi-thread lock and unlock, don't put it here
    // for more information, read comments in MainWindow::AddLog()

    // this function forwards all arguments to the command window
    // do nothing if no such command window
    if(auto pCW = GetCommandWindow(nCWID)){
        pCW->AddLog(nLogType, szPrompt, szMessage);
    }
}} {}
  }
  Function {GetCommandWindow(int nCWID)} {return_type {CommandWindow *}
  } {
    code {// GetCommandWindow(int nCWID)
// retrieve the command window pointer based on provided ID
{
    if(true
            && (nCWID > 0)
            && (m_MenuItemFirstCW + (nCWID - 1) <= m_MenuItemLastCW)
            && (m_MenuItemFirstCW + (nCWID - 1))->visible()){
        return (CommandWindow *)((m_MenuItemFirstCW + (nCWID - 1))->user_data());
    }else{
        return nullptr;
    }
}} {}
  }
  Function {CreateCommandWindow()} {return_type int
  } {
    code {// int CreateCommandWindow()
// main window create a new command window and store internally
// provide caller an ID returned for retrieve
{
    for(auto pMenuItem = m_MenuItemFirstCW; pMenuItem != m_MenuItemLastCW; ++pMenuItem){
        // because we use it as initialial status to do checking
        // it's very important to make sure all command window menu item are hidden
        if(pMenuItem->visible()){
            continue;
        }else{
            // we find a valid slot
            // won't create new command window if it contains one
            CommandWindow *pCW = nullptr;
            if(pMenuItem->user_data()){
                pCW = (CommandWindow *)(pMenuItem->user_data());
            }else{
                pCW = new CommandWindow();
                pMenuItem->user_data(pCW);
            }

            pMenuItem->deactivate();
            pMenuItem->show();

            pCW->BindLuaModule((uint32_t)(pMenuItem - m_MenuItemFirstCW + 1));
            pCW->ShowAll();

            // the first item return 1
            // and takes <= 0 as invalid command window ID
            return pMenuItem - m_MenuItemFirstCW + 1;
        }
    }

    // if all visible then return 0 as invalid
    return 0;
}} {}
  }
  Function {DeleteCommandWindow(int nCWID)} {open return_type void
  } {
    code {// DeleteCommandWindow(int nCWID)
// delete a command window based on the nCWID
// do nothing if no such command window, after this funciton nCWID is ready for next creation
{
    if(true
            && (nCWID > 0 )                                         // valid command window index
            && (m_MenuItemFirstCW + (nCWID - 1) <= m_MenuItemLastCW)      // 
            && (m_MenuItemFirstCW + (nCWID - 1))->visible()               // menu item is ``in use"
            && (m_MenuItemFirstCW + (nCWID - 1))->user_data()){           // menu item contains a command window

        // actually we won't delete the command window
        // instead we detach the lua module offside it and hide it only
        auto pMenuItem = m_MenuItemFirstCW + (nCWID - 1);

        // 0. clear all history of the window
        //    we need a clean browser when we reuse it next time
        ((CommandWindow *)(pMenuItem->user_data()))->ClearBrowser();

        // 1. detach the lua module inside it
        //    this will delete the internal lua module and its task hub
        ((CommandWindow *)(pMenuItem->user_data()))->DetachLuaModule();

        // 2. hide the command window
        //    won't delete it, avoid delete widgets in FLTK
        ((CommandWindow *)(pMenuItem->user_data()))->HideAll();

        // 3. hide the menu item for the command window
        pMenuItem->hide();
    }
}} {}
  }
} 
