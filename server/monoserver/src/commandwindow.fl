# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.hpp} 
code_name {.cpp}
decl {\#include "taskhub.hpp"} {public global
} 

decl {\#include "commandinput.hpp"} {public global
} 

decl {\#include "commandluamodule.hpp"} {public global
} 

class CommandWindow {open
} {
  decl {int m_CWID;} {private local
  }
  decl {TaskHub *m_luaModuleTaskHub;} {private local
  }
  decl {CommandLuaModule *m_luaModule;} {private local
  }
  Function {CommandWindow()} {open
  } {
    Fl_Window m_window {
      callback {// when get esc
// 1. hide current window
// 2. activate its menuitem in main window
// won't do any destruction inside callback, do it by ``exit()" in lua
{
    HideAll();

    extern MainWindow *g_mainWindow;
    g_mainWindow->HideCommandWindow(GetCWID());
}} open
      xywh {888 311 580 400} type Double resizable
      code0 {\#include "mainwindow.hpp"} visible
    } {
      Fl_Menu_Bar {} {
        xywh {0 0 580 25} box FLAT_BOX labelfont 4
      } {
        Submenu {} {
          label Configure open
          xywh {0 0 100 20} labelfont 4
        } {
          MenuItem {} {
            label Clear
            xywh {0 0 100 20} labelfont 4
          }
        }
      }
      Fl_Input m_input {
        xywh {0 375 580 25} labeltype NO_LABEL labelfont 4 textfont 4 resizable
        class CommandInput
      }
      Fl_Browser m_browser {
        callback {// callback for browser
// when getting double-clicks, it insert current entry to the input box
{
    // check if we get double-clicks
    if(Fl::event_clicks()){
        if(auto pText = m_browser->text(m_browser->value())){
            std::string szCommandStr = m_input->value();
            if(szCommandStr.empty()){
                // to skip the formatting string at the beginning
                // current I am using:
                //   @C4 : normal
                //   @C9 : warning
                //   @C1 : error
                m_input->value(pText + 3);
            }
        }
    }

}} selected
        xywh {0 25 580 350} type Hold labelfont 4 textfont 4
      }
    }
    code {{
    // initialization of the lua module and its taskhub
    m_CWID             = 0;
    m_luaModuleTaskHub = nullptr;
	m_luaModule        = nullptr;
	
	// bind current window to CommandInput
	// which helps to do event logic handling inside CommandInput
	// avoid to do it in CommandWindow::handle(int)
	m_input->Bind(this);
}} {}
  }
  Function {HideAll()} {return_type void
  } {
    code {{
	m_window->hide();
}} {}
  }
  Function {showAll()} {return_type void
  } {
    code {{
	m_window->show();
}} {}
  }
  Function {GetTaskHub()} {return_type {TaskHub *}
  } {
    code {{
	// won't put any cv-qualifiers
	// expose the TaskHub interface to outside
	return m_luaModuleTaskHub;
}} {}
  }
  Function {GetLuaModule()} {return_type {CommandLuaModule *}
  } {
    code {{
	// won't put any cv-qualifiers
	// expose the TaskHub interface to outside
	// then I don't have do implement CommandWindow::Execute(const char *)
	return m_luaModule;
}} {}
  }
  Function {DetachLuaModule()} {return_type void
  } {
    code {{
	// won't put any cv-qualifiers
	// expose the TaskHub interface to outside
	// then I don't have do implement CommandWindow::Execute(const char *)
    m_luaModuleTaskHub->Shutdown();

    delete m_luaModule;        m_luaModule        = nullptr;
    delete m_luaModuleTaskHub; m_luaModuleTaskHub = nullptr;
}} {}
  }
  Function {BindLuaModule(int nCWID)} {return_type void
  } {
    code {{
    // activate the internal LuaModule and its TaskHub
    // after this line the LuaModule grants a CWID to print
    // and LuaModuleTaskHub has an LuaModule as command input
    {
        if(nCWID > 0){
            condcheck(m_luaModule        == nullptr);
            condcheck(m_luaModuleTaskHub == nullptr);

            m_CWID             = nCWID;
            m_luaModuleTaskHub = new TaskHub();
            m_luaModule        = new CommandLuaModule((uint32_t)(nCWID));

            // start the hub now
            m_luaModuleTaskHub->Launch();
        }
    }
}} {}
  }
  Function {addLog(int nLogType, const char *szPrompt, const char *szLogInfo)} {return_type void
  } {
    code {{
    // log can be multiply lines but only do one line for this call
    // don't put multi-thread handling code here

    if(m_browser->size() > 5000){
        m_browser->remove(1);
    }

    const char *pColorCode = nullptr;
    switch(nLogType){
        case 0  : pColorCode = "@C4"; break;
        case 1  : pColorCode = "@C9"; break;
        default : pColorCode = "@C1"; break;
    }

    m_browser->add(((std::string(pColorCode) + (szPrompt ? szPrompt : "")) + (szLogInfo ? szLogInfo : "")).c_str());
    m_browser->bottomline(m_browser->size());
}} {}
  }
  Function {ClearBrowser()} {return_type void
  } {
    code {{
    // clear all history of current browser
    m_browser->clear();
}} {}
  }
  Function {GetCWID()} {return_type int
  } {
    code {{
    return m_CWID;
}} {}
  }
} 
