# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <cmath>} {public global
} 

decl {\#include <cstdio>} {public global
} 

decl {\#include <cstdlib>} {public global
} 

decl {\#include <vector>} {public global
} 

class AddMonsterWindow {open
} {
  Function {AddMonsterWindow()} {open
  } {
    Fl_Window m_Window {
      label {Add Monster} open
      xywh {535 230 335 260} type Double labelfont 4 modal visible
    } {
      Fl_Choice m_ValidMapList {
        label {Map:} open
        xywh {95 25 180 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Choice m_ValidMonsterList {
        label {Monster:} open
        xywh {95 66 180 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Choice m_ValidMonstCountList {
        label {Count:} open
        xywh {95 105 180 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Choice m_CurrentMonsterList {
        label {Current:} open
        xywh {95 144 180 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Button {} {
        label Refresh
        callback {{
	Refresh();
}}
        xywh {40 211 75 25} labelfont 4
      }
      Fl_Button {} {
        label Add
        xywh {131 211 75 25} labelfont 4
      }
      Fl_Button {} {
        label OK
        callback {{
	m_Window->hide();
}}
        xywh {221 211 75 25} labelfont 4
      }
    }
  }
  Function {ShowAll()} {} {
    code {{
	m_Window->show();
}} {}
  }
  Function {AddValid(const char *szSID, const char *szName)} {open return_type void
  } {
    code {{
	m_ValidList->add(szName, 0, 0, (void *)(std::atoi(szSID)), 0);
    	m_ValidList->textfont(4);
}} {}
  }
  Function {AddCurrent(const char *szSID, const char *szName)} {open return_type void
  } {
    code {{
	m_CurrentList->add(szName, 0, 0, (void *)(std::atoi(szSID)), 0);
    	m_CurrentList->textfont(4);
}} {}
  }
  Function {SetMapList(const std::vector<int> & stMapIDList)} {open return_type void
  } {
    code {{
	m_ValidMapList->clear();
	
	extern MonoServer *g_MonoServer;
	std::vector<int, std::string> stValidMapV;
	
	if(g_MonoServer->GetValidMapV(stValidMapV)){
		for(auto stPair: stValidMapV){
			AddMapList(stPair.first, stPair.second.c_str());
		}
	}else{
		fl_alert("No valid map currently");
	}
}} {selected
    }
  }
  Function {AddMapList(int nMapID, const char *szMapName)} {open return_type void
  } {
    code {{
	// TODO: check for redundancy of the map list
	m_ValidMapList->add(szMapName, 0, OnSelectMap, (void *)(nMapID), 0);
}} {}
  }
  Function {Refresh()} {open return_type void
  } {
    code {{
	m_CurrentList->clear();
	m_ValidList->clear();
	extern SceneServer *g_SceneServer;
	if(g_SceneServer){
		g_SceneServer->UpdateValidMonsterList();
	}

	if(m_ValidList->size() > 0){
		m_ValidList->value(0);
	}

	if(m_CurrentList->size() > 0){
		m_CurrentList->value(0);
	}
}} {}
  }
  Function {OnSelectMap(Fl_Widget *, void *pData)} {open return_type {static void}
  } {
    code {{
	extern AddMonsterWindow *g_AddMonsterWindow;	
	g_AddMonsterWindow->SetMonsterList((int)((intptr_t)(pData)));
}} {}
  }
  Function {SetMonsterList(int nMapID)} {open return_type void
  } {
    code {{
	extern MonoServer *g_MonoServer;
	std::vector<uint16_t, std::string> stMonsterV;
	
	if(g_MonoServer->GetValidMonsterV(stMonsterV)){
		for(auto stPair: stMonsterV){
			AddMonsterList(stPair.first, stPair.second.c_str());
		}
	}else{
		fl_alert("No valid monster for current map");
	}
}} {}
  }
  Function {AddMonsterList(int nMonsterID, const char *szMonsterName)} {return_type void
  } {
    code {{
	// TODO: check for redundancy of the map list
	m_ValidMonsterList->add(szMonsterName, 0, OnSelectMonster, (void *)(nMonsterID), 0);
}} {}
  }
  Function {OnSelectMonster(Fl_Widget *, void *pData)} {return_type {static void}
  } {
    code {{
	extern AddMonsterWindow *g_AddMonsterWindow;	
	g_AddMonsterWindow->SetMonsterCountList((int)((intptr_t)(pData)));
}} {}
  }
} 
