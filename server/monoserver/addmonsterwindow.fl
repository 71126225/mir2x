# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <cmath>} {public global
} 

decl {\#include <cstdio>} {public global
} 

decl {\#include <cstdlib>} {public global
} 

class AddMonsterWindow {open
} {
  Function {AddMonsterWindow()} {open
  } {
    Fl_Window m_Window {
      label {Add Monster} open selected
      xywh {510 309 300 230} type Double labelfont 4 visible
    } {
      Fl_Choice m_ValidList {
        label {Database:} open
        xywh {95 70 150 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Choice m_CurrentList {
        label {Current:} open
        xywh {95 115 150 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Button {} {
        label Add
        callback {{
    extern SceneServer *g_SceneServer;
    g_SceneServer->AddMonsterType((uint32_t)(m_ValidList->menu()[m_ValidList->value()].user_data()));
    
    Refresh();
}}
        xywh {111 190 75 25} labelfont 4
        code0 {\#include "sceneserver.hpp"}
      }
      Fl_Button {} {
        label OK
        callback {{
    m_Window->hide();
}}
        xywh {201 190 75 25} labelfont 4
        code0 {\#include "sceneserver.hpp"}
      }
      Fl_Button {} {
        label Refresh
        callback {{
    Refresh();
}}
        xywh {20 190 75 25} labelfont 4
        code0 {\#include "sceneserver.hpp"}
      }
      Fl_Choice m_CurrentList {
        label {Map:} open
        xywh {95 25 150 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
    }
  }
  Function {ShowAll()} {} {
    code {{
    m_Window->show();
}} {}
  }
  Function {AddValid(const char *szSID, const char *szName)} {return_type void
  } {
    code {{
    m_ValidList->add(szName, 0, 0, (void *)(std::atoi(szSID)), 0);
    m_ValidList->textfont(4);
}} {}
  }
  Function {AddCurrent(const char *szSID, const char *szName)} {return_type void
  } {
    code {{
    m_CurrentList->add(szName, 0, 0, (void *)(std::atoi(szSID)), 0);
    m_CurrentList->textfont(4);
}} {}
  }
  Function {Refresh()} {open return_type void
  } {
    code {{
    m_CurrentList->clear();
    m_ValidList->clear();
    extern SceneServer *g_SceneServer;
    if(g_SceneServer){
        g_SceneServer->UpdateValidMonsterList();
    }
    
    if(m_ValidList->size() > 0){
        m_ValidList->value(0);
    }
    
    if(m_CurrentList->size() > 0){
        m_CurrentList->value(0);
    }
}} {}
  }
} 
