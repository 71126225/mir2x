/*
 * =====================================================================================
 *
 *       Filename: logprof.hpp.in
 *        Created: 11/20/2020 19:03:56
 *    Description:
 *
 *
 *        Version: 1.0
 *       Revision: none
 *       Compiler: gcc
 *
 *         Author: ANHONG
 *          Email: anhonghe@gmail.com
 *   Organization: USTC
 *
 * =====================================================================================
 */

#pragma once
#include <atomic>
#include <functional>
#include <string_view>
#include <type_traits>

namespace _logProf
{
    constexpr const char * _inn_logFileList []
    {
        ${MIR2X_LOG_FILELIST}
    };

    template<size_t N> constexpr size_t fileName2Index(const char (&str)[N])
    {
        for(size_t i = 0; i < std::extent<decltype(_inn_logFileList)>::value; ++i){
            if(std::string_view(str).ends_with(_inn_logFileList[i])){
                return i;
            }
        }
        return SIZE_MAX;
    }

    constexpr size_t maxProfInOneFile = 4096;
    template<size_t fileIndex, int counter> constexpr size_t loc2Hash()
    {
        static_assert(fileIndex < std::extent<decltype(_inn_logFileList)>::value);
        static_assert(counter   < _logProf::maxProfInOneFile);
        return fileIndex * _logProf::maxProfInOneFile + counter;
    }

    constexpr size_t maxProfilerCount()
    {
        return std::extent<decltype(_inn_logFileList)>::value * _logProf::maxProfInOneFile;
    }

    inline long long getCurrTick()
    {
        timespec now;
        clock_gettime(CLOCK_REALTIME, &now);
        return ((long long)(now.tv_sec) * 1000000000LL + (long long)(now.tv_nsec));
    }

    struct logProfilerEntry
    {
        std::atomic<long long> count   {0};
        std::atomic<long long> time    {0};
        std::atomic<long long> maxtime {0};
        std::atomic<const char *> name {nullptr};
    };

    extern bool g_logEnableProfiler;
    extern std::array<logProfilerEntry, _logProf::maxProfilerCount()> g_logProfilerEntrySink;

    class logProfilerHelper
    {
        private:
            size_t m_loc = 0;
            const char *m_funcName = nullptr;

        private:
            long long m_startTime = 0;

        public:
            logProfilerHelper(size_t loc, const char *funcName)
            {
                if(g_logEnableProfiler){
                    m_loc = loc;
                    m_funcName = funcName;
                    m_startTime = _logProf::getCurrTick();
                }
            }

            ~logProfilerHelper()
            {
                if(!g_logEnableProfiler){
                    return;
                }

                auto &sinkRef = g_logProfilerEntrySink.at(m_loc);
                sinkRef.count.fetch_add(1, std::memory_order_relaxed);
                sinkRef.name.store(m_funcName, std::memory_order_relaxed);

                const long long nsec = _logProf::getCurrTick() - m_startTime;
                sinkRef.time.fetch_add(nsec, std::memory_order_relaxed);

                // need stronger memory order
                // https://herbsutter.com/2012/08/31/reader-qa-how-to-write-a-cas-loop-using-stdatomics/

                long long prev = sinkRef.maxtime.load();
                while(prev < nsec && !sinkRef.maxtime.compare_exchange_weak(prev, nsec));
            }
    };
}

extern void logDisableProfiler();
extern void logProfiling(const std::function<void(const std::string &)> &);

#define logProfilerHelper_name(counter) logProfilerHelper_inst_##counter
#define logProfilerHelper_inst(counter) logProfilerHelper_name(counter)
#define logProfiler()           _logProf::logProfilerHelper logProfilerHelper_inst(__LINE__) {_logProf::loc2Hash<_logProf::fileName2Index(__FILE__), __COUNTER__>(), __func__}
#define logScopedProfiler(name) _logProf::logProfilerHelper logProfilerHelper_inst(__LINE__) {_logProf::loc2Hash<_logProf::fileName2Index(__FILE__), __COUNTER__>(), "" name }

#define logNamedProfilerHelper_line(linenum) #linenum
#define logNamedProfilerHelper_lstr(linenum) logNamedProfilerHelper_line(linenum)
#define logNamedProfilerHelper_name(counter) logNamedProfilerHelper_inst_##counter
#define logNamedProfilerHelper_inst(counter) logNamedProfilerHelper_name(counter)
#define logNamedProfiler(name) _logProf::logProfilerHelper logNamedProfilerHelper_inst(__LINE__) {_logProf::loc2Hash<_logProf::fileName2Index(__FILE__), __COUNTER__>(), "" name "_line_" logNamedProfilerHelper_lstr(__LINE__)}
