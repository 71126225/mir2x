FUNCTION(PREBUILD_GIT_REPO_LIBPINYIN)
    SET(LIBPINYIN_PREBUILD_CMAKELIST_CONTENT "
        CMAKE_MINIMUM_REQUIRED(VERSION ${CMAKE_MINIMUM_REQUIRED_VERSION})

        PROJECT(PREBUILD_GIT_REPO_LIBPINYIN)
        INCLUDE(ExternalProject)

        ExternalProject_add(
            libpinyin

            GIT_REPOSITORY \"https://github.com/etorth/libpinyin.git\"
            GIT_TAG        \"main\"

            SOURCE_DIR  \"${MIR2X_3RD_PARTY_DIR}/libpinyin\"
            INSTALL_DIR \"${MIR2X_3RD_PARTY_DIR}/libpinyin/build\"

            UPDATE_COMMAND \"\"
            PATCH_COMMAND  \"\"

            CMAKE_ARGS \"-DCMAKE_INSTALL_PREFIX=${MIR2X_3RD_PARTY_DIR}/libpinyin/build/install\" \"-DBUILD_SHARED_LIBS=OFF\"

            LOG_BUILD 1
            LOG_CONFIGURE 1
            LOG_INSTALL 1

            CMAKE_GENERATOR          \"${CMAKE_GENERATOR}\"
            CMAKE_GENERATOR_TOOLSET  \"${CMAKE_GENERATOR_TOOLSET}\"
            CMAKE_GENERATOR_PLATFORM \"${CMAKE_GENERATOR_PLATFORM}\"
            CMAKE_GENERATOR_INSTANCE \"${CMAKE_GENERATOR_INSTANCE}\"
        )

        ADD_CUSTOM_TARGET(PREBUILD_GIT_REPO_LIBPINYIN)
        ADD_DEPENDENCIES(PREBUILD_GIT_REPO_LIBPINYIN libpinyin)
    ")

    SET(LIBPINYIN_PREBUILD_DIR "${MIR2X_3RD_PARTY_DIR}/libpinyin_prebuild")

    FILE(MAKE_DIRECTORY "${LIBPINYIN_PREBUILD_DIR}" "${LIBPINYIN_PREBUILD_DIR}/build")
    FILE(WRITE "${LIBPINYIN_PREBUILD_DIR}/CMakeLists.txt" "${LIBPINYIN_PREBUILD_CMAKELIST_CONTENT}")

    EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND}
        -G "${CMAKE_GENERATOR}"
        -A "${CMAKE_GENERATOR_PLATFORM}"
        -T "${CMAKE_GENERATOR_TOOLSET}"

        ..
        WORKING_DIRECTORY "${LIBPINYIN_PREBUILD_DIR}/build")

    EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND}
        --build .
        --config ${CMAKE_BUILD_TYPE}

        WORKING_DIRECTORY "${LIBPINYIN_PREBUILD_DIR}/build")
ENDFUNCTION()

PREBUILD_GIT_REPO_LIBPINYIN()

SET(ENV{PKG_CONFIG_PATH} ${MIR2X_3RD_PARTY_DIR}/libpinyin/build/install/lib/pkgconfig:$ENV{PKG_CONFIG_PATH})
PKG_CHECK_MODULES(LIBPINYIN REQUIRED libpinyin)

INCLUDE_DIRECTORIES(SYSTEM ${LIBPINYIN_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBPINYIN_LIBRARY_DIRS})

# libpinyin build during config stage
# so there is no dependency support, it's already valid for build stage
