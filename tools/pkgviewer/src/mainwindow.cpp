// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "mainwindow.hpp"
#include <string>
#include <cstdint>
#include <iostream>
#include "wilimagepackage.hpp"

void MainWindow::cb_m_Window_i(Fl_Double_Window*, void*) {
  /*
if(fl_ask("Quit?")){
    exit(0);
}
*/

exit(0);
}
void MainWindow::cb_m_Window(Fl_Double_Window* o, void* v) {
  ((MainWindow*)(o->user_data()))->cb_m_Window_i(o,v);
}

void MainWindow::cb_Open_i(Fl_Menu_*, void*) {
  {
    extern PreviewWindow *g_PreviewWindow;
    delete g_PreviewWindow;
    g_PreviewWindow = nullptr;

    Fl_Native_File_Chooser fileChooser;
    extern std::string g_FileFullName;
    fileChooser.title("Select .WIL File");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    char matchedFileNames[] =
        "WIL\t*.wil\n"
        ;

    fileChooser.filter(matchedFileNames);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            fl_alert(fileChooser.errmsg());
            break;
        case  1:
            break;
        default:
            {
            	DeactivateAll();
                // TODO: NO ERROR CHECKING HERE
                g_FileFullName = fileChooser.filename();
                std::replace(g_FileFullName.begin(), g_FileFullName.end(), '\\', '/');

                std::string pathName, fileName, fileExt;
                auto posF = g_FileFullName.find_last_of('/');
                auto posD = g_FileFullName.find_last_of('.');

                pathName = g_FileFullName.substr(0, posF);
                fileName = g_FileFullName.substr(posF + 1, posD - posF - 1);
                fileExt  = g_FileFullName.substr(posD + 1);

                // std::replace(pathName.begin(), pathName.end(), '\\', '/');

                // std::cout << pathName << std::endl;
                // std::cout << fileName << std::endl;
                // std::cout << fileExt  << std::endl;

                extern WilImagePackage g_WilPackage;
                g_WilPackage.Load(pathName.c_str(), fileName.c_str(), fileExt.c_str());

                m_Browser->clear();
                int  maxLen = 0;
                auto nCnt   = g_WilPackage.IndexCount();
                for(auto nTmp = nCnt; nTmp > 0; nTmp /= 10){
                    maxLen++;
                }

                auto p = new ProgressBarWindow();
                p->SetValue(0);
                p->Redraw();
                p->ShowAll();
                Fl::check();

		
                std::string formatStr;
                formatStr = "Index: %0" + std::to_string(maxLen) + "d         W:%4d            H:%4d";
                for(int i = 0; i < g_WilPackage.IndexCount(); ++i){
                    int nNewPer = (int)(i * 100 / g_WilPackage.IndexCount());
                    p->SetValue(nNewPer);
                    p->Redraw();
                    p->ShowAll();
                    Fl::check();

                    g_WilPackage.SetIndex(i);
                    if(g_WilPackage.CurrentImageValid()){
                        char tmpBuf[128];
                        std::sprintf(tmpBuf, formatStr.c_str(), i, g_WilPackage.CurrentImageInfo().shWidth, g_WilPackage.CurrentImageInfo().shHeight);
                        // auto InfoBlk = g_WilPackage.CurrentImageInfo();
                        m_Browser->add(tmpBuf, (void *)((intptr_t)i));
                    }
                }
                p->HideAll();
                delete p;
                
                ActivateAll();

                break;
            }
    }
};
}
void MainWindow::cb_Open(Fl_Menu_* o, void* v) {
  ((MainWindow*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void MainWindow::cb_Export_i(Fl_Menu_*, void*) {
  {
    Fl_Native_File_Chooser fileChooser;
    fileChooser.title("Save");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_SAVE_DIRECTORY);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            fl_alert(fileChooser.errmsg());
            break;
        case  1:
            break;
        default:
            {
                extern WilImagePackage g_WilPackage;
                g_WilPackage.SetIndex(SelectedImageIndex());
                if(g_WilPackage.CurrentImageValid()){
                    auto nW = g_WilPackage.CurrentImageInfo().shWidth;
                    auto nH = g_WilPackage.CurrentImageInfo().shHeight;

                    auto  p = new uint32_t[nW * nH];
                    g_WilPackage.Decode(p, 0XFFFFFFFF, 0XFFFFFFFF);
                    char tmpIndex[16];
                    std::sprintf(tmpIndex, "%06d", SelectedImageIndex());
                    std::string tmpFilePathName = fileChooser.filename();
                    std::replace(tmpFilePathName.begin(), tmpFilePathName.end(), '\\', '/');
                    SaveRGBABufferToPNG((uint8_t *)p, nW, nH, (tmpFilePathName + "/" + tmpIndex + ".PNG").c_str());
                    delete p;
                }
            }
            break;
    }
};
}
void MainWindow::cb_Export(Fl_Menu_* o, void* v) {
  ((MainWindow*)(o->parent()->user_data()))->cb_Export_i(o,v);
}

void MainWindow::cb_Export1_i(Fl_Menu_*, void*) {
  {
    Fl_Native_File_Chooser fileChooser;
    fileChooser.title("Save All");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_SAVE_DIRECTORY);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            fl_alert(fileChooser.errmsg());
            break;
        case  1:
            break;
        default:
            {
                auto p = new ProgressBarWindow();
                p->SetValue(0);
                p->Redraw();
                p->ShowAll();
                Fl::check();
                
                uint32_t *pBuffer    = nullptr;
                size_t    nBufferLen = 0;
                extern WilImagePackage g_WilPackage;
                
                for(int i = 1; i <= m_Browser->size(); ++i){
                	int nNewPer = (int)(i * 100 / g_WilPackage.IndexCount());
                    p->SetValue(nNewPer);
                    p->Redraw();
                    p->ShowAll();
                    Fl::check(); // actually we don't need it
                    
                    uint32_t imgIdx = (uint32_t)((intptr_t)(m_Browser->data(i)));
                    g_WilPackage.SetIndex(imgIdx);
                    if(g_WilPackage.CurrentImageValid()){
                        auto nW = g_WilPackage.CurrentImageInfo().shWidth;
                        auto nH = g_WilPackage.CurrentImageInfo().shHeight;

                        if(nBufferLen < (size_t)(nW * nH)){
                            delete pBuffer;
                            pBuffer    = new uint32_t[nW * nH];
                            nBufferLen = (size_t)(nW * nH);
                        }

                        g_WilPackage.Decode(pBuffer, 0XFFFFFFFF, 0XFFFFFFFF);
                        char tmpIndex[16];
                        std::sprintf(tmpIndex, "%06d", imgIdx);
                        std::string tmpFilePathName = fileChooser.filename();
                        std::replace(tmpFilePathName.begin(), tmpFilePathName.end(), '\\', '/');
                        SaveRGBABufferToPNG((uint8_t *)pBuffer, nW, nH, (tmpFilePathName + "/" + tmpIndex + ".PNG").c_str());
                    }
                }
                delete pBuffer;
                
                p->HideAll();
                delete p;
            }
            break;
    }
};
}
void MainWindow::cb_Export1(Fl_Menu_* o, void* v) {
  ((MainWindow*)(o->parent()->user_data()))->cb_Export1_i(o,v);
}

void MainWindow::cb_Exit_i(Fl_Menu_*, void*) {
  exit(0);
}
void MainWindow::cb_Exit(Fl_Menu_* o, void* v) {
  ((MainWindow*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void MainWindow::cb_About_i(Fl_Menu_*, void*) {
  {
	static AboutWindow *p;
	if(!p){
		p = new AboutWindow();
	}
	p->ShowAll();
};
}
void MainWindow::cb_About(Fl_Menu_* o, void* v) {
  ((MainWindow*)(o->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item MainWindow::menu_m_MenuBar[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 4, 14, 0},
 {"Open", 0x4006f,  (Fl_Callback*)MainWindow::cb_Open, 0, 128, FL_NORMAL_LABEL, 4, 14, 0},
 {"Export Current", 0x40078,  (Fl_Callback*)MainWindow::cb_Export, 0, 0, FL_NORMAL_LABEL, 4, 14, 0},
 {"Export All", 0x50078,  (Fl_Callback*)MainWindow::cb_Export1, 0, 128, FL_NORMAL_LABEL, 4, 14, 0},
 {"Exit", 0x40071,  (Fl_Callback*)MainWindow::cb_Exit, 0, 0, FL_NORMAL_LABEL, 4, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"About", 0,  0, 0, 64, FL_NORMAL_LABEL, 4, 14, 0},
 {"About Me", 0,  (Fl_Callback*)MainWindow::cb_About, 0, 0, FL_NORMAL_LABEL, 4, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void MainWindow::cb_m_Browser_i(Fl_Browser*, void*) {
  extern PreviewWindow   *g_PreviewWindow;
extern MainWindow      *g_MainWindow;
extern WilImagePackage  g_WilPackage;

delete g_PreviewWindow;
g_PreviewWindow = nullptr;

g_WilPackage.SetIndex(g_MainWindow->SelectedImageIndex());
if(g_WilPackage.CurrentImageValid()){
	int16_t W = g_WilPackage.CurrentImageInfo().shWidth;
	int16_t H = g_WilPackage.CurrentImageInfo().shHeight;
	
	H = (std::max)(((std::min)(((int16_t)(H * 1.5)), (int16_t)(H + 40))), (int16_t)200);
	W = (std::max)(((std::min)(((int16_t)(W * 1.5)), (int16_t)(W + 40))), (int16_t)200);

	g_PreviewWindow = new PreviewWindow(W, H);
	g_PreviewWindow->show();
	g_PreviewWindow->redraw();
};
}
void MainWindow::cb_m_Browser(Fl_Browser* o, void* v) {
  ((MainWindow*)(o->parent()->user_data()))->cb_m_Browser_i(o,v);
}

MainWindow::MainWindow() {
  { m_Window = new Fl_Double_Window(555, 605);
    m_Window->labelfont(4);
    m_Window->callback((Fl_Callback*)cb_m_Window, (void*)(this));
    { m_MenuBar = new Fl_Menu_Bar(0, 0, 600, 20);
      m_MenuBar->box(FL_FLAT_BOX);
      m_MenuBar->labelfont(4);
      m_MenuBar->textfont(4);
      m_MenuBar->menu(menu_m_MenuBar);
    } // Fl_Menu_Bar* m_MenuBar
    { m_Browser = new Fl_Browser(0, 20, 555, 585);
      m_Browser->type(2);
      m_Browser->labelfont(4);
      m_Browser->textfont(4);
      m_Browser->callback((Fl_Callback*)cb_m_Browser);
    } // Fl_Browser* m_Browser
    m_Window->end();
  } // Fl_Double_Window* m_Window
}

void MainWindow::ShowAll() {
  m_Window->show();
}

uint32_t MainWindow::SelectedImageIndex() {
  for(int i = 1; i <= m_Browser->size(); ++i)
  {
  	if(m_Browser->selected(i)){
  		return (uint32_t)((intptr_t)m_Browser->data(i));
  	}
  }
  
  extern WilImagePackage g_WilPackage;
  return g_WilPackage.ImageCount();
}

void MainWindow::ActivateAll() {
  m_Window->activate();
  m_MenuBar->activate();
  m_Browser->activate();
}

void MainWindow::DeactivateAll() {
  m_Window->deactivate();
  m_MenuBar->deactivate();
  m_Browser->deactivate();
}
