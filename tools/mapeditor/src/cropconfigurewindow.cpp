// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "cropconfigurewindow.hpp"

void CropConfigureWindow::cb_OK_i(Fl_Button*, void*) {
  {
    extern MainWindow *g_MainWindow;
    /*if(!g_MainWindow->EnableEdit()){
        return;
    }*/
    extern Mir2Map g_Map;
    if(!g_Map.Valid()){
        return;
    }
    
    int nStartX = (std::lround)(m_Left->value());
    int nStartY = (std::lround)(m_Top->value());
    int nW      = g_Map.Width()  - nStartX - (std::lround)(m_Right->value());
    int nH      = g_Map.Height() - nStartY - (std::lround)(m_Bottom->value());
    
    g_Map.CropSize(nStartX, nStartY, nW, nH);
    g_MainWindow->AfterLoadMir2Map();
    g_MainWindow->UpdateScrollBar(0, 0);
    
    m_Left->value(0);
    m_Top->value(0);
    m_Right->value(0);
    m_Bottom->value(0);

    m_Window->hide();
};
}
void CropConfigureWindow::cb_OK(Fl_Button* o, void* v) {
  ((CropConfigureWindow*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

CropConfigureWindow::CropConfigureWindow() {
  { m_Window = new Fl_Double_Window(468, 199);
    m_Window->labelfont(4);
    m_Window->user_data((void*)(this));
    { m_Top = new Fl_Value_Input(230, 30, 65, 24, "Top Margin");
      m_Top->labelfont(4);
      m_Top->textfont(4);
    } // Fl_Value_Input* m_Top
    { m_Bottom = new Fl_Value_Input(230, 113, 65, 24, "Bottom Margin");
      m_Bottom->labelfont(4);
      m_Bottom->textfont(4);
    } // Fl_Value_Input* m_Bottom
    { m_Left = new Fl_Value_Input(117, 73, 65, 24, "Left Margin");
      m_Left->labelfont(4);
      m_Left->textfont(4);
    } // Fl_Value_Input* m_Left
    { m_Right = new Fl_Value_Input(342, 71, 65, 24, "Right Margin");
      m_Right->labelfont(4);
      m_Right->textfont(4);
    } // Fl_Value_Input* m_Right
    { Fl_Button* o = new Fl_Button(345, 160, 64, 20, "OK");
      o->labelfont(4);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    m_Window->end();
  } // Fl_Double_Window* m_Window
}

void CropConfigureWindow::ShowAll() {
  {
      m_Window->show();
  }
}
