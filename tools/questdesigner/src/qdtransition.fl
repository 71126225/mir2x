# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include <array>} {public global
}

decl {\#include <optional>} {public global
}

widget_class QD_Transition {open
  xywh {175 190 265 140} type Double resizable visible position_relative
} {
  decl {std::optional<std::array<int, 2>> m_lastDragLoc;} {private local
  }
  Fl_Box m_dragBox {
    label {@>}
    xywh {0 0 35 140} box UP_BOX
  }
  Fl_Button {} {
    label button
    callback {{
    size(w() + 2, h() + 2);
    parent()->redraw();
}}
    xywh {35 35 140 35}
  }
  Fl_Button {} {
    label button
    callback {{
    size(w() - 2, h() - 2);
    parent()->redraw();
}}
    xywh {35 70 140 35}
  }
  Fl_Button {} {
    label button
    xywh {35 105 140 35}
  }
  Fl_Button {} {
    label button
    callback {{
    size(w() + 2, h() + 2);
    parent()->redraw();
}}
    xywh {175 35 90 105}
  }
  Fl_Group {} {
    xywh {35 0 230 35}
    code0 {\#include "qdcondchecker_level.hpp"}
    class QD_CondChecker_level
  } {}
  Function {handle(int event)} {return_type int
  } {
    code {int result = Fl_Group::handle(event);
if(Fl::event_button() == 1){
    switch(event){
        case FL_PUSH:
            {
                m_lastDragLoc = {Fl::event_x(), Fl::event_y()};
                result = 1;
                break;
            }
        case FL_DRAG:
            {
                if(m_lastDragLoc.has_value()){
                    const int ex = Fl::event_x();
                    const int ey = Fl::event_y();

                    const int xdiff = ex - m_lastDragLoc.value()[0];
                    const int ydiff = ey - m_lastDragLoc.value()[1];

                    position(x() + xdiff, y() + ydiff);
                    parent()->redraw();

                    m_lastDragLoc = {ex, ey};
                }
                else{
                    m_lastDragLoc = {Fl::event_x(), Fl::event_y()};
                }

                result = 1;
                break;
            }
        case FL_RELEASE:
            {
                result = 1;
                break;
            }
        default:
            {
                break;
            }
    }
}
return result;} {}
  }
}
