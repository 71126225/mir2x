# data file for the Fltk User Interface Designer (fluid)
version 1.0400
header_name {.h}
code_name {.cxx}
decl {\#include <array>} {public global
}

decl {\#include <optional>} {public global
}

widget_class QD_CondCheckerBox {open
  xywh {2866 541 400 100} box UP_BOX resizable visible position_relative_rescale
} {
  decl {std::optional<std::array<int, 2>> m_lastDragLoc;} {private local
  }
  Fl_Menu_Bar {} {
    xywh {0 0 95 25} box NO_BOX
  } {
    Submenu {} {
      label Edit
      xywh {10 10 100 20}
    } {
      Submenu {} {
        label Setting
        xywh {10 10 100 20}
      } {
        MenuItem {} {
          label {拥有物品}
          callback {{
    m_centerBox->clear();
    m_centerBox->begin();
    {
        new QD_CondChecker_hasItem(m_centerBox->x(), m_centerBox->y(), m_centerBox->w(), m_centerBox->h());
    }
    m_centerBox->end();
    redraw();
}}
          xywh {10 10 100 20}
          code0 {\#include "qdcondchecker_hasitem.hpp"}
        }
        MenuItem {} {
          label {等级}
          callback {{
    m_centerBox->clear();
    m_centerBox->begin();
    {
        new QD_CondChecker_level(m_centerBox->x(), m_centerBox->y(), m_centerBox->w(), m_centerBox->h());
    }
    m_centerBox->end();
    redraw();
}}
          xywh {20 20 100 20}
          code0 {\#include "qdcondchecker_level.hpp"}
        }
        MenuItem {} {
          label {计数器}
          callback {{
    m_centerBox->clear();
    m_centerBox->begin();
    {
        new QD_CondChecker_checkCounter(m_centerBox->x(), m_centerBox->y(), m_centerBox->w(), m_centerBox->h());
    }
    m_centerBox->end();
    redraw();
}}
          xywh {30 30 100 20}
          code0 {\#include "qdcondchecker_checkcounter.hpp"}
        }
      }
      MenuItem {} {
        label Delete
        callback {{
    m_centerBox->clear();
    redraw();
}}
        xywh {20 20 100 20} divider
      }
      Submenu {} {
        label Output
        xywh {0 0 100 20}
      } {
        MenuItem {} {
          label Add
          callback {{
    int newX = 0;
    int newY = 0;
    int newW = 0;
    int newH = 0;
    
    if(m_outputs->children() > 0){
        newW = m_outputs->child(0)->w();
        newH = m_outputs->child(0)->h();
        newX = m_outputs->child(0)->x();
        newY = m_outputs->child(0)->y() + newH;
    }
    else{
        newX = m_outputs->x();
        newY = m_outputs->y();
        newW = m_outputs->w();
        newH = newW;
    }
    
    m_outputs->begin();
    {
        new Fl_Button(newX, newY, newW, newH, "@>");
    }
    m_outputs->end();
    parent()->redraw();
}}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Delete
          xywh {10 10 100 20}
        }
      }
    }
    Submenu {} {
      label View
      xywh {0 0 100 20}
    } {
      MenuItem {} {
        label {Room In}
        callback {size(w() * 1.05, h() * 1.05);
redraw();}
        xywh {0 0 100 20}
      }
      MenuItem {} {
        label {Room Out}
        callback {size(std::max<int>(400, w() * 0.95), std::max<int>(100, h() * 0.95));
redraw();}
        xywh {10 10 100 20}
      }
    }
  }
  Fl_Box {} {
    xywh {95 0 280 25}
  }
  Fl_Button {} {
    label {@-2circle}
    xywh {374 0 26 25}
  }
  Fl_Button m_input {
    label {@>}
    xywh {0 45 25 25}
  }
  Fl_Pack m_outputs {
    xywh {375 25 25 75}
  } {
    Fl_Button {} {
      label {@>}
      xywh {375 51 25 25}
    }
  }
  Fl_Group m_centerBox {
    xywh {25 25 350 75} box UP_BOX resizable
  } {}
  Function {calculateLayout()} {return_type void
  } {
    code {{
    // recalculate box layout
    // +---------------------------------+-+
    // |                                 |x|
    // | +-------------------------------+-+
    // | |                               | |
    // | |                               +-+
    // +-+                               |>|
    // |>|                               |>|
    // +-+                               |>|
    // | |                               |>|
    // | |                               +-+
    // | |                               | |
    // +-+-------------------------------+-+
}} {}
  }
  Function {redraw()} {return_type void
  } {
    code {{
    if(parent()){
        parent()->redraw();
    }
    else{
        Fl_Group::redraw();
    }
}} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {int result = Fl_Group::handle(event);
if(Fl::event_button() == FL_LEFT_MOUSE){
    switch(event){
        case FL_PUSH:
            {
                m_lastDragLoc = {Fl::event_x(), Fl::event_y()};
                result = 1;
                break;
            }
        case FL_DRAG:
            {
                if(m_lastDragLoc.has_value()){
                    const int ex = Fl::event_x();
                    const int ey = Fl::event_y();

                    const int xdiff = ex - m_lastDragLoc.value()[0];
                    const int ydiff = ey - m_lastDragLoc.value()[1];

                    position(x() + xdiff, y() + ydiff);
                    parent()->redraw();

                    m_lastDragLoc = {ex, ey};
                }
                else{
                    m_lastDragLoc = {Fl::event_x(), Fl::event_y()};
                }

                result = 1;
                break;
            }
        case FL_RELEASE:
            {
                m_lastDragLoc.reset();
                result = 1;
                break;
            }
        default:
            {
                break;
            }
    }
}
return result;} {}
  }
}
