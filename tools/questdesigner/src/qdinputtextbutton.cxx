// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "qdinputtextbutton.h"
#include <string>

QD_InputTextButton::QD_InputTextButton(int X, int Y, int W, int H, const char *L) :
  Fl_Group(0, 0, W, H, L)
{
  { m_editor = new Fl_Text_Editor(round(W*0.000000), round(H*0.000000), round(W*1.000000), round(H*1.000000));
    m_editor->buffer(new Fl_Text_Buffer());
  } // Fl_Text_Editor* m_editor
  { m_button = new Fl_Button(round(W*0.000000), round(H*0.000000), round(W*1.000000), round(H*1.000000), "button");
    m_defaultLabel = m_button->label() ? m_button->label() : "";
  } // Fl_Button* m_button
  position(X, Y);
  end();
}

void QD_InputTextButton::edit(bool enable) {
  {
      if(enable){
          m_edit  ->show();
          m_button->hide();
      }
      else{
          m_edit  ->hide();
          m_button->show();
      }
  }
}

void QD_InputTextButton::handle(int event) {
  {
      const auto result = Fl_Group::handle(event);
      if(event == FL_UNFOCUS){
          edit(false);
      }

      std::string text;
      auto textptr = m_editor->buffer()->text();

      if(textptr){
          text = textptr;
          std::free(textptr);
      }

      if(str_haschar(text)){
          std::stringstream ss(text);
          std::string token;
          std::string currTitle;

          while(std::getline(ss, token, '\n')){
              if(currTitle.empty()){
                  currTitle = token;
              }
              else{
                  currTitle += "\n";
                  currTitle += token;
              }

              int titleW = 0;
              int titleH = 0;
              fl_measure(currTitle.c_str(), titleW, titleH, false);

              if(titleH >= m_button->h()){
                  break;
              }

              m_button->copy_label(currTitle.c_str());
              m_button->align(Fl_Align(FL_ALIGN_CLIP | FL_ALIGN_INSIDE | m_inputAlign));
          }
      }
      else{
          m_button->copy_label(m_defaultLabel.c_str());
          m_button->align(Fl_Align(FL_ALIGN_CLIP | FL_ALIGN_INSIDE | FL_ALIGN_CENTER));
      }
      return result;
  }
}

void QD_InputTextButton::label_align(Fl_Align align) {
  {
      m_inputAlign = align;
  }
}
